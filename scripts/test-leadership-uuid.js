// Script para testar valida√ß√£o de UUID no sistema de lideran√ßa
const { createClient } = require('@supabase/supabase-js');
const dotenv = require('dotenv');

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env.development' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Fun√ß√£o para validar UUID (mesma do service)
function isUuid(value) {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(value);
}

async function testLeadershipUuid() {
  console.log('üîç Testando valida√ß√£o de UUID no sistema de lideran√ßa...\n');

  try {
    // 1. Verificar se a tabela profile_leaderships existe
    console.log('1Ô∏è‚É£ Verificando se a tabela profile_leaderships existe...');
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'profile_leaderships');

    if (tablesError) {
      console.error('‚ùå Erro ao verificar tabelas:', tablesError);
      return;
    }

    if (tables && tables.length > 0) {
      console.log('‚úÖ Tabela profile_leaderships existe');
    } else {
      console.log('‚ùå Tabela profile_leaderships N√ÉO existe');
      console.log('üìù Execute o script create-profile-leaderships-table.sql no Supabase');
      return;
    }

    // 2. Buscar alguns profiles para testar
    console.log('\n2Ô∏è‚É£ Buscando profiles para teste...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, full_name')
      .limit(3);

    if (profilesError) {
      console.error('‚ùå Erro ao buscar profiles:', profilesError);
      return;
    }

    if (profiles && profiles.length > 0) {
      console.log('üë• Profiles encontrados:');
      profiles.forEach(profile => {
        console.log(`  - ${profile.id}: ${profile.full_name || 'Sem nome'}`);
        console.log(`    UUID v√°lido: ${isUuid(profile.id) ? '‚úÖ' : '‚ùå'}`);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhum profile encontrado');
      return;
    }

    // 3. Testar valida√ß√£o de UUID com valores inv√°lidos
    console.log('\n3Ô∏è‚É£ Testando valida√ß√£o de UUID...');
    const testValues = [
      'undefined',
      'null',
      '',
      'invalid-uuid',
      '123',
      profiles[0].id, // UUID v√°lido
    ];

    testValues.forEach(value => {
      const isValid = isUuid(value);
      console.log(`  - "${value}": ${isValid ? '‚úÖ V√°lido' : '‚ùå Inv√°lido'}`);
    });

    // 4. Testar query com UUID v√°lido
    console.log('\n4Ô∏è‚É£ Testando query com UUID v√°lido...');
    const validProfileId = profiles[0].id;
    
    const { data: leadership, error: leadershipError } = await supabase
      .from('profile_leaderships')
      .select('*')
      .eq('profile_id', validProfileId)
      .limit(1)
      .maybeSingle();

    if (leadershipError) {
      console.error('‚ùå Erro na query de lideran√ßa:', leadershipError);
    } else {
      console.log('‚úÖ Query executada com sucesso');
      console.log(`üìä Registros encontrados: ${leadership ? 1 : 0}`);
    }

    // 5. Testar query com UUID inv√°lido (deve falhar)
    console.log('\n5Ô∏è‚É£ Testando query com UUID inv√°lido...');
    const { data: invalidData, error: invalidError } = await supabase
      .from('profile_leaderships')
      .select('*')
      .eq('profile_id', 'undefined')
      .limit(1)
      .maybeSingle();

    if (invalidError) {
      console.log('‚úÖ Erro esperado com UUID inv√°lido:', invalidError.message);
    } else {
      console.log('‚ö†Ô∏è Query com UUID inv√°lido n√£o falhou como esperado');
    }

    console.log('\n‚úÖ Teste conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar teste
testLeadershipUuid();
