#!/usr/bin/env node

/**
 * Script de Sincroniza√ß√£o Supabase
 * 
 * Este script sincroniza dados do Supabase ONLINE para o LOCAL
 * de forma segura, sem fazer altera√ß√µes no banco online.
 * 
 * Regras de seguran√ßa:
 * - Apenas opera√ß√µes SELECT no banco online
 * - Nunca executa RESET, TRUNCATE, DELETE, DROP TABLE, ALTER TYPE, REINDEX
 * - N√£o faz "reset de projeto" ou migra√ß√µes que apaguem dados online
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√µes
const CONFIG = {
  // URLs e chaves do Supabase (devem ser configuradas no .env)
  SUPABASE_ONLINE_URL: process.env.VITE_SUPABASE_URL,
  SUPABASE_ONLINE_ANON_KEY: process.env.VITE_SUPABASE_ANON_KEY,
  SUPABASE_LOCAL_URL: process.env.SUPABASE_LOCAL_URL || 'http://localhost:54321',
  SUPABASE_LOCAL_ANON_KEY: process.env.SUPABASE_LOCAL_ANON_KEY,
  
  // Pasta para backups
  BACKUP_DIR: path.join(__dirname, '..', 'backups'),
  
  // Tabelas para sincronizar (em ordem de depend√™ncia)
  TABLES_TO_SYNC: [
    'profiles',
    'leader_profiles', 
    'election_settings',
    'city_goals',
    'neighborhood_goals',
    'leader_areas',
    'profile_leaderships',
    'people',
    'audit_logs',
    'tags',
    'people_tags'
  ]
};

// Verificar se as configura√ß√µes est√£o presentes
function validateConfig() {
  const required = [
    'SUPABASE_ONLINE_URL',
    'SUPABASE_ONLINE_ANON_KEY',
    'SUPABASE_LOCAL_ANON_KEY'
  ];
  
  const missing = required.filter(key => !CONFIG[key]);
  
  if (missing.length > 0) {
    console.error('‚ùå Configura√ß√µes obrigat√≥rias ausentes:');
    missing.forEach(key => console.error(`   - ${key}`));
    console.error('\nüí° Configure essas vari√°veis no arquivo .env');
    process.exit(1);
  }
}

// Criar clientes Supabase
function createClients() {
  console.log('üîó Conectando aos bancos de dados...');
  
  const onlineClient = createClient(
    CONFIG.SUPABASE_ONLINE_URL,
    CONFIG.SUPABASE_ONLINE_ANON_KEY
  );
  
  const localClient = createClient(
    CONFIG.SUPABASE_LOCAL_URL,
    CONFIG.SUPABASE_LOCAL_ANON_KEY
  );
  
  return { onlineClient, localClient };
}

// Criar pasta de backup se n√£o existir
function ensureBackupDir() {
  if (!fs.existsSync(CONFIG.BACKUP_DIR)) {
    fs.mkdirSync(CONFIG.BACKUP_DIR, { recursive: true });
    console.log(`üìÅ Pasta de backup criada: ${CONFIG.BACKUP_DIR}`);
  }
}

// Fazer backup de uma tabela
async function backupTable(client, tableName) {
  console.log(`üì• Fazendo backup da tabela: ${tableName}`);
  
  try {
    const { data, error } = await client
      .from(tableName)
      .select('*');
    
    if (error) {
      console.error(`‚ùå Erro ao fazer backup da tabela ${tableName}:`, error.message);
      return null;
    }
    
    const backupFile = path.join(CONFIG.BACKUP_DIR, `${tableName}_backup.json`);
    fs.writeFileSync(backupFile, JSON.stringify(data, null, 2));
    
    console.log(`‚úÖ Backup salvo: ${backupFile} (${data.length} registros)`);
    return data;
    
  } catch (error) {
    console.error(`‚ùå Erro inesperado ao fazer backup da tabela ${tableName}:`, error.message);
    return null;
  }
}

// Importar dados para o banco local
async function importToLocal(client, tableName, data) {
  if (!data || data.length === 0) {
    console.log(`‚è≠Ô∏è  Pulando importa√ß√£o da tabela ${tableName} (sem dados)`);
    return true;
  }
  
  console.log(`üì§ Importando ${data.length} registros para a tabela: ${tableName}`);
  
  try {
    // Limpar tabela local primeiro (apenas local)
    console.log(`üßπ Limpando tabela local: ${tableName}`);
    const { error: deleteError } = await client
      .from(tableName)
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all records
    
    if (deleteError) {
      console.warn(`‚ö†Ô∏è  Aviso ao limpar tabela ${tableName}:`, deleteError.message);
    }
    
    // Inserir dados em lotes para evitar timeout
    const batchSize = 100;
    const batches = [];
    
    for (let i = 0; i < data.length; i += batchSize) {
      batches.push(data.slice(i, i + batchSize));
    }
    
    for (let i = 0; i < batches.length; i++) {
      const batch = batches[i];
      console.log(`üì¶ Inserindo lote ${i + 1}/${batches.length} (${batch.length} registros)`);
      
      const { error: insertError } = await client
        .from(tableName)
        .insert(batch);
      
      if (insertError) {
        console.error(`‚ùå Erro ao inserir lote ${i + 1} na tabela ${tableName}:`, insertError.message);
        return false;
      }
    }
    
    console.log(`‚úÖ Importa√ß√£o conclu√≠da para a tabela: ${tableName}`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå Erro inesperado ao importar para a tabela ${tableName}:`, error.message);
    return false;
  }
}

// Verificar se a sincroniza√ß√£o foi bem-sucedida
async function verifySync(onlineClient, localClient, tableName) {
  try {
    const { data: onlineData, error: onlineError } = await onlineClient
      .from(tableName)
      .select('id');
    
    const { data: localData, error: localError } = await localClient
      .from(tableName)
      .select('id');
    
    if (onlineError || localError) {
      console.warn(`‚ö†Ô∏è  N√£o foi poss√≠vel verificar a tabela ${tableName}`);
      return false;
    }
    
    const onlineCount = onlineData?.length || 0;
    const localCount = localData?.length || 0;
    
    if (onlineCount === localCount) {
      console.log(`‚úÖ Verifica√ß√£o OK: ${tableName} (${localCount} registros)`);
      return true;
    } else {
      console.warn(`‚ö†Ô∏è  Contagem diferente: ${tableName} (Online: ${onlineCount}, Local: ${localCount})`);
      return false;
    }
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Erro na verifica√ß√£o da tabela ${tableName}:`, error.message);
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üöÄ Iniciando sincroniza√ß√£o Supabase Online ‚Üí Local');
  console.log('=' .repeat(60));
  
  // Validar configura√ß√µes
  validateConfig();
  
  // Criar pasta de backup
  ensureBackupDir();
  
  // Criar clientes
  const { onlineClient, localClient } = createClients();
  
  // Testar conex√µes
  console.log('üîç Testando conex√µes...');
  
  try {
    const { data: onlineTest } = await onlineClient.from('profiles').select('id').limit(1);
    console.log('‚úÖ Conex√£o com Supabase Online: OK');
  } catch (error) {
    console.error('‚ùå Erro na conex√£o com Supabase Online:', error.message);
    process.exit(1);
  }
  
  try {
    const { data: localTest } = await localClient.from('profiles').select('id').limit(1);
    console.log('‚úÖ Conex√£o com Supabase Local: OK');
  } catch (error) {
    console.error('‚ùå Erro na conex√£o com Supabase Local:', error.message);
    process.exit(1);
  }
  
  // Sincronizar cada tabela
  const results = [];
  
  for (const tableName of CONFIG.TABLES_TO_SYNC) {
    console.log(`\nüìã Processando tabela: ${tableName}`);
    console.log('-'.repeat(40));
    
    // Fazer backup
    const data = await backupTable(onlineClient, tableName);
    
    if (data === null) {
      console.log(`‚è≠Ô∏è  Pulando tabela ${tableName} (erro no backup)`);
      results.push({ table: tableName, success: false, reason: 'backup_failed' });
      continue;
    }
    
    // Importar para local
    const importSuccess = await importToLocal(localClient, tableName, data);
    
    if (!importSuccess) {
      console.log(`‚ùå Falha na importa√ß√£o da tabela ${tableName}`);
      results.push({ table: tableName, success: false, reason: 'import_failed' });
      continue;
    }
    
    // Verificar sincroniza√ß√£o
    const verifySuccess = await verifySync(onlineClient, localClient, tableName);
    
    results.push({ 
      table: tableName, 
      success: true, 
      records: data.length,
      verified: verifySuccess 
    });
  }
  
  // Relat√≥rio final
  console.log('\n' + '='.repeat(60));
  console.log('üìä RELAT√ìRIO FINAL DA SINCRONIZA√á√ÉO');
  console.log('='.repeat(60));
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  console.log(`‚úÖ Tabelas sincronizadas com sucesso: ${successful.length}`);
  successful.forEach(r => {
    console.log(`   - ${r.table}: ${r.records} registros ${r.verified ? '‚úÖ' : '‚ö†Ô∏è'}`);
  });
  
  if (failed.length > 0) {
    console.log(`\n‚ùå Tabelas com falha: ${failed.length}`);
    failed.forEach(r => {
      console.log(`   - ${r.table}: ${r.reason}`);
    });
  }
  
  console.log(`\nüìÅ Backups salvos em: ${CONFIG.BACKUP_DIR}`);
  console.log('üéâ Sincroniza√ß√£o conclu√≠da!');
  
  if (failed.length > 0) {
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('üí• Erro fatal:', error.message);
    process.exit(1);
  });
}

export { main as syncSupabase };
